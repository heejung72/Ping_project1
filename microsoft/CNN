{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"zy6Idh0ShQzu","executionInfo":{"status":"ok","timestamp":1716364292022,"user_tz":-540,"elapsed":70094,"user":{"displayName":"A A","userId":"01071460355606733188"}},"outputId":"5de011d3-9037-49ef-9ef5-5e986991a787"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]},{"cell_type":"code","source":["\"\"\"\n","import pandas as pd\n","import os\n","\n","# 원본 CSV 파일 경로\n","csv_file_path = \"/content/drive/MyDrive/Ping!_AI악성코드분류기/microsoft/trainLabels.csv\"\n","# 이미지 파일이 있는 폴더 경로\n","image_folder_path = \"/content/drive/MyDrive/Ping!_AI악성코드분류기/microsoft/binary_img\"\n","# 새로 저장할 CSV 파일 경로\n","new_csv_file_path = \"/content/drive/MyDrive/Ping!_AI악성코드분류기/microsoft/raw_asm_data/train_label_200.csv\"\n","\n","# CSV 파일 읽기\n","df = pd.read_csv(csv_file_path)\n","\n","# 이미지 파일 목록 가져오기\n","image_files = os.listdir(image_folder_path)\n","image_files = [os.path.splitext(file)[0] for file in image_files]  # 파일명에서 확장자 제거\n","\n","# 파일명에 해당하는 행만 필터링\n","filtered_df = df[df['Id'].isin(image_files)]\n","\n","# 새로운 CSV 파일로 저장\n","filtered_df.to_csv(new_csv_file_path, index=False)\n","\"\"\""],"metadata":{"id":"YeCS60TyyLYk","executionInfo":{"status":"ok","timestamp":1716053184448,"user_tz":-540,"elapsed":43,"user":{"displayName":"A A","userId":"01071460355606733188"}},"colab":{"base_uri":"https://localhost:8080/","height":90},"outputId":"55b89e65-9944-4050-f476-d0db779fd1fd"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["'\\nimport pandas as pd\\nimport os\\n\\n# 원본 CSV 파일 경로\\ncsv_file_path = \"/content/drive/MyDrive/Ping!_AI악성코드분류기/microsoft/trainLabels.csv\"\\n# 이미지 파일이 있는 폴더 경로\\nimage_folder_path = \"/content/drive/MyDrive/Ping!_AI악성코드분류기/microsoft/binary_img\"\\n# 새로 저장할 CSV 파일 경로\\nnew_csv_file_path = \"/content/drive/MyDrive/Ping!_AI악성코드분류기/microsoft/raw_asm_data/train_label_200.csv\"\\n\\n# CSV 파일 읽기\\ndf = pd.read_csv(csv_file_path)\\n\\n# 이미지 파일 목록 가져오기\\nimage_files = os.listdir(image_folder_path)\\nimage_files = [os.path.splitext(file)[0] for file in image_files]  # 파일명에서 확장자 제거\\n\\n# 파일명에 해당하는 행만 필터링\\nfiltered_df = df[df[\\'Id\\'].isin(image_files)]\\n\\n# 새로운 CSV 파일로 저장\\nfiltered_df.to_csv(new_csv_file_path, index=False)\\n'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":2}]},{"cell_type":"code","source":["from sklearn.model_selection import train_test_split\n","import pandas as pd\n","import tensorflow as tf\n","\n","df = pd.read_csv(\"/content/drive/MyDrive/Ping!_AI악성코드분류기/microsoft/raw_asm_data/train_label_200.csv\")\n","\n","# 이미지 파일 경로와 클래스 레이블을 리스트로 변환\n","image_paths = df['Id'].tolist()\n","labels = df['Class'].tolist()\n","\n","img_dir = \"/content/drive/MyDrive/Ping!_AI악성코드분류기/microsoft/binary_img/\"\n","\n","# 데이터를 train, val, test 세트로 나누기\n","train_images, test_images, train_labels, test_labels = train_test_split(image_paths, labels, test_size=0.2, random_state=42)\n","train_images, val_images, train_labels, val_labels = train_test_split(train_images, train_labels, test_size=0.2, random_state=42)\n","\n","label_mapping = {1: 0, 2: 1, 3: 2, 4: 3, 6: 4, 7: 5, 8: 6, 9: 7}\n","# 클래스 레이블을 변경\n","train_labels = [label_mapping[label] for label in train_labels]\n","val_labels = [label_mapping[label] for label in val_labels]\n","test_labels = [label_mapping[label] for label in test_labels]\n","\n","# 이미지 파일 경로에 확장자 추가\n","train_images = [img_dir+image_path + '.png' for image_path in train_images]\n","val_images = [img_dir+image_path + '.png' for image_path in val_images]\n","test_images = [img_dir+image_path + '.png' for image_path in test_images]\n","\n","# 데이터셋 생성\n","train_dataset = tf.data.Dataset.from_tensor_slices((train_images, train_labels))\n","val_dataset = tf.data.Dataset.from_tensor_slices((val_images, val_labels))\n","test_dataset = tf.data.Dataset.from_tensor_slices((test_images, test_labels))\n","\n","# 데이터 전처리 함수 정의\n","def load_and_preprocess_image(image_path, label):\n","    image = tf.io.read_file(image_path)\n","    image = tf.image.decode_jpeg(image, channels=1)\n","    image = tf.image.resize(image, (256, 256))\n","    image = image / 255.0\n","    return image, label\n","\n","# 데이터셋에 전처리 함수 적용\n","train_dataset = train_dataset.map(load_and_preprocess_image, num_parallel_calls=tf.data.experimental.AUTOTUNE)\n","val_dataset = val_dataset.map(load_and_preprocess_image, num_parallel_calls=tf.data.experimental.AUTOTUNE)\n","test_dataset = test_dataset.map(load_and_preprocess_image, num_parallel_calls=tf.data.experimental.AUTOTUNE)\n","\n","# 데이터셋을 셔플하고 배치로 나누기\n","batch_size = 32\n","train_dataset = train_dataset.shuffle(buffer_size=len(train_images)).batch(batch_size).prefetch(buffer_size=tf.data.experimental.AUTOTUNE)\n","val_dataset = val_dataset.batch(batch_size).prefetch(buffer_size=tf.data.experimental.AUTOTUNE)\n","test_dataset = test_dataset.batch(batch_size).prefetch(buffer_size=tf.data.experimental.AUTOTUNE)"],"metadata":{"id":"sGHCEwUpowLH"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# 각 클래스별로 5개씩 이미지 시각화\n","import matplotlib.pyplot as plt\n","\n","num_samples_per_class = 5\n","class_datasets = {label: [] for label in set(train_labels)}\n","\n","for image, label in train_dataset:\n","    for i in range(batch_size):\n","        class_label = label[i].numpy()\n","        class_datasets[class_label].append(image[i])\n","\n","for label, images in class_datasets.items():\n","    print(f\"Class:\", label)\n","    fig, axes = plt.subplots(1, num_samples_per_class, figsize=(15, 3))\n","    for i in range(num_samples_per_class):\n","        axes[i].imshow(images[i], cmap='gray')\n","        axes[i].axis('off')\n","    plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000,"output_embedded_package_id":"1eYE-xAZfs_2EvFrEgs9ZyKQWKgrQGQIt"},"id":"Cs_wIu137-Z3","executionInfo":{"status":"ok","timestamp":1716371836249,"user_tz":-540,"elapsed":52323,"user":{"displayName":"A A","userId":"01071460355606733188"}},"outputId":"93c445d7-214e-4b82-9a60-4ed361d33e2f"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":"Output hidden; open in https://colab.research.google.com to view."},"metadata":{}}]},{"cell_type":"code","source":["model = tf.keras.Sequential([\n","    tf.keras.layers.Conv2D(32, (3, 3), activation='relu', input_shape=(256, 256, 1)),\n","    tf.keras.layers.MaxPooling2D((2, 2)),\n","    tf.keras.layers.Conv2D(32, (3, 3), activation='relu'),\n","    tf.keras.layers.MaxPooling2D((2, 2)),\n","    tf.keras.layers.Conv2D(64, (3, 3), activation='relu'),\n","    tf.keras.layers.MaxPooling2D((2, 2)),\n","    tf.keras.layers.Conv2D(128, (3, 3), activation='relu'),\n","    tf.keras.layers.MaxPooling2D((2, 2)),\n","    tf.keras.layers.Flatten(),\n","    tf.keras.layers.Dense(128, activation='relu'),\n","    tf.keras.layers.Dense(8, activation='softmax')\n","])\n","\n","model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])\n","# 모델 학습\n","model.summary()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"DmRo5g2gozwT","executionInfo":{"status":"ok","timestamp":1716313212069,"user_tz":-540,"elapsed":34004,"user":{"displayName":"A A","userId":"01071460355606733188"}},"outputId":"c2518f6c-ae11-4b68-ead3-4ee6403b59cc"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Model: \"sequential_6\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," conv2d_21 (Conv2D)          (None, 254, 254, 32)      320       \n","                                                                 \n"," max_pooling2d_21 (MaxPooli  (None, 127, 127, 32)      0         \n"," ng2D)                                                           \n","                                                                 \n"," conv2d_22 (Conv2D)          (None, 125, 125, 32)      9248      \n","                                                                 \n"," max_pooling2d_22 (MaxPooli  (None, 62, 62, 32)        0         \n"," ng2D)                                                           \n","                                                                 \n"," conv2d_23 (Conv2D)          (None, 60, 60, 64)        18496     \n","                                                                 \n"," max_pooling2d_23 (MaxPooli  (None, 30, 30, 64)        0         \n"," ng2D)                                                           \n","                                                                 \n"," conv2d_24 (Conv2D)          (None, 28, 28, 128)       73856     \n","                                                                 \n"," max_pooling2d_24 (MaxPooli  (None, 14, 14, 128)       0         \n"," ng2D)                                                           \n","                                                                 \n"," flatten_6 (Flatten)         (None, 25088)             0         \n","                                                                 \n"," dense_12 (Dense)            (None, 128)               3211392   \n","                                                                 \n"," dense_13 (Dense)            (None, 8)                 1032      \n","                                                                 \n","=================================================================\n","Total params: 3314344 (12.64 MB)\n","Trainable params: 3314344 (12.64 MB)\n","Non-trainable params: 0 (0.00 Byte)\n","_________________________________________________________________\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"OjXyIwlZPDV5"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# EarlyStopping 콜백 정의\n","early_stopping = tf.keras.callbacks.EarlyStopping(monitor='val_loss', patience=5, restore_best_weights=True)\n","\n","# 모델 학습\n","history = model.fit(\n","    x=train_dataset,\n","    validation_data=val_dataset,\n","    epochs=50,\n","    callbacks=[early_stopping]\n",")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"YymSdbZ9sic_","executionInfo":{"status":"ok","timestamp":1716315420025,"user_tz":-540,"elapsed":2207995,"user":{"displayName":"A A","userId":"01071460355606733188"}},"outputId":"27791130-2711-4b7d-9813-399f5a9e10fa"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/50\n","32/32 [==============================] - 105s 3s/step - loss: 2.0845 - accuracy: 0.1045 - val_loss: 2.0761 - val_accuracy: 0.1289\n","Epoch 2/50\n","32/32 [==============================] - 100s 3s/step - loss: 2.0728 - accuracy: 0.1406 - val_loss: 2.0421 - val_accuracy: 0.2148\n","Epoch 3/50\n","32/32 [==============================] - 99s 3s/step - loss: 1.9924 - accuracy: 0.2002 - val_loss: 1.9040 - val_accuracy: 0.3438\n","Epoch 4/50\n","32/32 [==============================] - 95s 3s/step - loss: 1.8313 - accuracy: 0.3105 - val_loss: 1.7042 - val_accuracy: 0.3477\n","Epoch 5/50\n","32/32 [==============================] - 99s 3s/step - loss: 1.6294 - accuracy: 0.3828 - val_loss: 1.5360 - val_accuracy: 0.4336\n","Epoch 6/50\n","32/32 [==============================] - 99s 3s/step - loss: 1.5047 - accuracy: 0.4385 - val_loss: 1.3735 - val_accuracy: 0.5117\n","Epoch 7/50\n","32/32 [==============================] - 95s 3s/step - loss: 1.4671 - accuracy: 0.4600 - val_loss: 1.3639 - val_accuracy: 0.4727\n","Epoch 8/50\n","32/32 [==============================] - 100s 3s/step - loss: 1.3035 - accuracy: 0.5420 - val_loss: 1.2397 - val_accuracy: 0.5352\n","Epoch 9/50\n","32/32 [==============================] - 99s 3s/step - loss: 1.1542 - accuracy: 0.6006 - val_loss: 1.1081 - val_accuracy: 0.6562\n","Epoch 10/50\n","32/32 [==============================] - 98s 3s/step - loss: 1.0340 - accuracy: 0.6514 - val_loss: 1.0231 - val_accuracy: 0.7031\n","Epoch 11/50\n","32/32 [==============================] - 100s 3s/step - loss: 0.9232 - accuracy: 0.6826 - val_loss: 0.9758 - val_accuracy: 0.7031\n","Epoch 12/50\n","32/32 [==============================] - 103s 3s/step - loss: 0.8955 - accuracy: 0.6953 - val_loss: 1.0581 - val_accuracy: 0.6328\n","Epoch 13/50\n","32/32 [==============================] - 109s 3s/step - loss: 0.7548 - accuracy: 0.7402 - val_loss: 0.7831 - val_accuracy: 0.7461\n","Epoch 14/50\n","32/32 [==============================] - 109s 3s/step - loss: 0.6206 - accuracy: 0.7891 - val_loss: 0.7738 - val_accuracy: 0.7773\n","Epoch 15/50\n","32/32 [==============================] - 109s 3s/step - loss: 0.6392 - accuracy: 0.7842 - val_loss: 0.9034 - val_accuracy: 0.7148\n","Epoch 16/50\n","32/32 [==============================] - 110s 3s/step - loss: 0.5447 - accuracy: 0.8086 - val_loss: 0.7759 - val_accuracy: 0.7812\n","Epoch 17/50\n","32/32 [==============================] - 109s 3s/step - loss: 0.4372 - accuracy: 0.8633 - val_loss: 0.8488 - val_accuracy: 0.7344\n","Epoch 18/50\n","32/32 [==============================] - 107s 3s/step - loss: 0.3566 - accuracy: 0.8887 - val_loss: 0.8337 - val_accuracy: 0.7734\n","Epoch 19/50\n","32/32 [==============================] - 101s 3s/step - loss: 0.2895 - accuracy: 0.9033 - val_loss: 0.8737 - val_accuracy: 0.7812\n"]}]},{"cell_type":"code","source":["import matplotlib.pyplot as plt\n","\n","# 학습 결과(history)로부터 정확도(accuracy)와 검증 정확도(validation accuracy)를 가져옴\n","train_accuracy = history.history['accuracy']\n","val_accuracy = history.history['val_accuracy']\n","\n","# 에포크 수 생성\n","epochs = range(1, len(train_accuracy) + 1)\n","\n","# 정확도 시각화\n","plt.figure(figsize=(10, 6))\n","plt.plot(epochs, train_accuracy, 'b', label='Training accuracy')\n","plt.plot(epochs, val_accuracy, 'r', label='Validation accuracy')\n","plt.title('Training and Validation Accuracy')\n","plt.xlabel('Epochs')\n","plt.ylabel('Accuracy')\n","plt.legend()\n","plt.grid(True)\n","plt.show()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":564},"id":"bP4DP4ntY4qW","executionInfo":{"status":"ok","timestamp":1716315761253,"user_tz":-540,"elapsed":37310,"user":{"displayName":"A A","userId":"01071460355606733188"}},"outputId":"88bd4e8d-ecbf-4089-f3a9-8a759e1baf5c"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["# 테스트 데이터셋으로 모델 평가\n","loss, accuracy = model.evaluate(test_dataset)\n","print(f\"손실: {loss}\")\n","print(f\"정확도: {accuracy}\")\n","#channel3 batch32 epoch10 정확도: 0.5843750238418579\n","#channel1 batch32 epoch10 정확도: 0.699999988079071\n","#channel1 batch32 epoch13 정확도: 0.706250011920929\n","#dropout epoch를 많이 높게 주면 정확도 높아질수도 있지만 20정도까진 시간도 너무 오래걸리고 과소적합.\n","#32 64 128 channel1 batch32 epoch50(earlystopping patience5)  정확도: 0.609375\n","#32 32 128 정확도: 0.612500011920929\n","#32 32 64 128 정확도: 정확도: 0.6875\n","#32 32 64 128 patience3 정확도: 0.6781250238418579\n","\n","\n"],"metadata":{"id":"g79uHuJUpEtU","executionInfo":{"status":"ok","timestamp":1716315479267,"user_tz":-540,"elapsed":10321,"user":{"displayName":"A A","userId":"01071460355606733188"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"90d1ba9d-2a07-4193-ce2c-6f22be4af648"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["10/10 [==============================] - 10s 1s/step - loss: 0.9997 - accuracy: 0.6875\n","손실: 0.999734103679657\n","정확도: 0.6875\n"]}]},{"cell_type":"code","source":["model2 = tf.keras.Sequential([\n","    tf.keras.layers.Conv2D(32, (3, 3), activation='relu', input_shape=(256, 256, 1)),\n","    tf.keras.layers.MaxPooling2D((2, 2)),\n","    tf.keras.layers.Conv2D(32, (3, 3), activation='relu'),\n","    tf.keras.layers.MaxPooling2D((2, 2)),\n","    tf.keras.layers.Conv2D(64, (3, 3), activation='relu'),\n","    tf.keras.layers.MaxPooling2D((2, 2)),\n","    tf.keras.layers.Conv2D(128, (3, 3), activation='relu'),\n","    tf.keras.layers.MaxPooling2D((2, 2)),\n","    tf.keras.layers.Flatten(),\n","    tf.keras.layers.Dense(128, activation='relu'),\n","    tf.keras.layers.Dense(8, activation='softmax')\n","])\n","\n","model2.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])\n","\n","model2.summary()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"BVzVRnGIZYQF","executionInfo":{"status":"ok","timestamp":1716364319669,"user_tz":-540,"elapsed":1456,"user":{"displayName":"A A","userId":"01071460355606733188"}},"outputId":"4892a8b5-c80c-4a6d-9f81-75ba18284afa"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Model: \"sequential\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," conv2d (Conv2D)             (None, 254, 254, 32)      320       \n","                                                                 \n"," max_pooling2d (MaxPooling2  (None, 127, 127, 32)      0         \n"," D)                                                              \n","                                                                 \n"," conv2d_1 (Conv2D)           (None, 125, 125, 32)      9248      \n","                                                                 \n"," max_pooling2d_1 (MaxPoolin  (None, 62, 62, 32)        0         \n"," g2D)                                                            \n","                                                                 \n"," conv2d_2 (Conv2D)           (None, 60, 60, 64)        18496     \n","                                                                 \n"," max_pooling2d_2 (MaxPoolin  (None, 30, 30, 64)        0         \n"," g2D)                                                            \n","                                                                 \n"," conv2d_3 (Conv2D)           (None, 28, 28, 128)       73856     \n","                                                                 \n"," max_pooling2d_3 (MaxPoolin  (None, 14, 14, 128)       0         \n"," g2D)                                                            \n","                                                                 \n"," flatten (Flatten)           (None, 25088)             0         \n","                                                                 \n"," dense (Dense)               (None, 128)               3211392   \n","                                                                 \n"," dense_1 (Dense)             (None, 8)                 1032      \n","                                                                 \n","=================================================================\n","Total params: 3314344 (12.64 MB)\n","Trainable params: 3314344 (12.64 MB)\n","Non-trainable params: 0 (0.00 Byte)\n","_________________________________________________________________\n"]}]},{"cell_type":"code","source":["model2.fit(x=train_dataset,\n","    validation_data=val_dataset,\n","    epochs=16)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-3s9SNHqZd0i","executionInfo":{"status":"ok","timestamp":1716366893277,"user_tz":-540,"elapsed":2544216,"user":{"displayName":"A A","userId":"01071460355606733188"}},"outputId":"e5838c6f-fd33-4ba8-f87d-8b5faa79b8aa"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/16\n","32/32 [==============================] - 401s 5s/step - loss: 2.0912 - accuracy: 0.1133 - val_loss: 2.0749 - val_accuracy: 0.1484\n","Epoch 2/16\n","32/32 [==============================] - 123s 4s/step - loss: 2.0655 - accuracy: 0.1826 - val_loss: 2.0006 - val_accuracy: 0.2383\n","Epoch 3/16\n","32/32 [==============================] - 126s 4s/step - loss: 1.9488 - accuracy: 0.2090 - val_loss: 1.9000 - val_accuracy: 0.1641\n","Epoch 4/16\n","32/32 [==============================] - 125s 4s/step - loss: 1.8311 - accuracy: 0.2705 - val_loss: 1.8204 - val_accuracy: 0.2031\n","Epoch 5/16\n","32/32 [==============================] - 133s 4s/step - loss: 1.7318 - accuracy: 0.3320 - val_loss: 1.5802 - val_accuracy: 0.3633\n","Epoch 6/16\n","32/32 [==============================] - 123s 4s/step - loss: 1.5582 - accuracy: 0.4062 - val_loss: 1.4574 - val_accuracy: 0.4102\n","Epoch 7/16\n","32/32 [==============================] - 123s 4s/step - loss: 1.4046 - accuracy: 0.5000 - val_loss: 1.3327 - val_accuracy: 0.5625\n","Epoch 8/16\n","32/32 [==============================] - 126s 4s/step - loss: 1.2693 - accuracy: 0.5566 - val_loss: 1.1740 - val_accuracy: 0.6172\n","Epoch 9/16\n","32/32 [==============================] - 122s 4s/step - loss: 1.1264 - accuracy: 0.6309 - val_loss: 0.9595 - val_accuracy: 0.6875\n","Epoch 10/16\n","32/32 [==============================] - 149s 5s/step - loss: 0.9692 - accuracy: 0.6709 - val_loss: 0.9354 - val_accuracy: 0.6875\n","Epoch 11/16\n","32/32 [==============================] - 140s 4s/step - loss: 0.9435 - accuracy: 0.6826 - val_loss: 0.7814 - val_accuracy: 0.7539\n","Epoch 12/16\n","32/32 [==============================] - 134s 4s/step - loss: 0.7536 - accuracy: 0.7285 - val_loss: 1.1002 - val_accuracy: 0.5625\n","Epoch 13/16\n","32/32 [==============================] - 122s 4s/step - loss: 0.6993 - accuracy: 0.7705 - val_loss: 0.7225 - val_accuracy: 0.7734\n","Epoch 14/16\n","32/32 [==============================] - 134s 4s/step - loss: 0.6012 - accuracy: 0.8066 - val_loss: 0.7721 - val_accuracy: 0.7852\n","Epoch 15/16\n","32/32 [==============================] - 126s 4s/step - loss: 0.5427 - accuracy: 0.8076 - val_loss: 0.6993 - val_accuracy: 0.7734\n","Epoch 16/16\n","32/32 [==============================] - 126s 4s/step - loss: 0.4381 - accuracy: 0.8623 - val_loss: 0.7480 - val_accuracy: 0.8008\n"]},{"output_type":"execute_result","data":{"text/plain":["<keras.src.callbacks.History at 0x7d51acabdb10>"]},"metadata":{},"execution_count":4}]},{"cell_type":"code","source":["loss, accuracy = model2.evaluate(test_dataset)\n","print(f\"손실: {loss}\")\n","print(f\"정확도: {accuracy}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"U_u6ri39f3Cb","executionInfo":{"status":"ok","timestamp":1716366991713,"user_tz":-540,"elapsed":82335,"user":{"displayName":"A A","userId":"01071460355606733188"}},"outputId":"56f48235-782f-4c7f-da58-cea11c94d77b"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["10/10 [==============================] - 70s 7s/step - loss: 1.0068 - accuracy: 0.6938\n","손실: 1.0067603588104248\n","정확도: 0.6937500238418579\n"]}]},{"cell_type":"code","source":["model3 = tf.keras.Sequential([\n","    tf.keras.layers.Conv2D(32, (3, 3), activation='relu', input_shape=(256, 256, 1)),\n","    tf.keras.layers.MaxPooling2D((2, 2)),\n","    tf.keras.layers.Conv2D(32, (3, 3), activation='relu'),\n","    tf.keras.layers.MaxPooling2D((2, 2)),\n","    tf.keras.layers.Conv2D(64, (3, 3), activation='relu'),\n","    tf.keras.layers.MaxPooling2D((2, 2)),\n","\n","    tf.keras.layers.Flatten(),\n","    tf.keras.layers.Dense(128, activation='relu'),\n","    tf.keras.layers.Dropout(0.5),\n","    tf.keras.layers.Dense(8, activation='softmax')\n","])\n","\n","model3.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])\n","# 모델 학습\n","model3.summary()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"aSucn9xwYiUr","executionInfo":{"status":"ok","timestamp":1716368647283,"user_tz":-540,"elapsed":1605,"user":{"displayName":"A A","userId":"01071460355606733188"}},"outputId":"7f3488bb-7835-41c6-ccb3-1e85d7913b68"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Model: \"sequential_3\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," conv2d_12 (Conv2D)          (None, 254, 254, 32)      320       \n","                                                                 \n"," max_pooling2d_12 (MaxPooli  (None, 127, 127, 32)      0         \n"," ng2D)                                                           \n","                                                                 \n"," conv2d_13 (Conv2D)          (None, 125, 125, 32)      9248      \n","                                                                 \n"," max_pooling2d_13 (MaxPooli  (None, 62, 62, 32)        0         \n"," ng2D)                                                           \n","                                                                 \n"," conv2d_14 (Conv2D)          (None, 60, 60, 64)        18496     \n","                                                                 \n"," max_pooling2d_14 (MaxPooli  (None, 30, 30, 64)        0         \n"," ng2D)                                                           \n","                                                                 \n"," flatten_3 (Flatten)         (None, 57600)             0         \n","                                                                 \n"," dense_6 (Dense)             (None, 128)               7372928   \n","                                                                 \n"," dropout_2 (Dropout)         (None, 128)               0         \n","                                                                 \n"," dense_7 (Dense)             (None, 8)                 1032      \n","                                                                 \n","=================================================================\n","Total params: 7402024 (28.24 MB)\n","Trainable params: 7402024 (28.24 MB)\n","Non-trainable params: 0 (0.00 Byte)\n","_________________________________________________________________\n"]}]},{"cell_type":"code","source":["# EarlyStopping 콜백 정의\n","early_stopping = tf.keras.callbacks.EarlyStopping(monitor='val_loss', patience=5, restore_best_weights=True)\n","\n","# 모델 학습\n","history = model3.fit(\n","    x=train_dataset,\n","    validation_data=val_dataset,\n","    epochs=50,\n","    callbacks=[early_stopping]\n",")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"F8ODan05ZtkJ","executionInfo":{"status":"ok","timestamp":1716371408248,"user_tz":-540,"elapsed":1910377,"user":{"displayName":"A A","userId":"01071460355606733188"}},"outputId":"dff11e1c-353b-43d1-c691-f10fb07be6c2"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/50\n","32/32 [==============================] - 121s 4s/step - loss: 2.0957 - accuracy: 0.1289 - val_loss: 2.0770 - val_accuracy: 0.1758\n","Epoch 2/50\n","32/32 [==============================] - 119s 4s/step - loss: 2.0724 - accuracy: 0.1514 - val_loss: 2.0674 - val_accuracy: 0.1484\n","Epoch 3/50\n","32/32 [==============================] - 116s 3s/step - loss: 2.0851 - accuracy: 0.1396 - val_loss: 2.0761 - val_accuracy: 0.1523\n","Epoch 4/50\n","32/32 [==============================] - 116s 4s/step - loss: 2.0749 - accuracy: 0.1533 - val_loss: 2.0512 - val_accuracy: 0.1953\n","Epoch 5/50\n","32/32 [==============================] - 116s 4s/step - loss: 2.0242 - accuracy: 0.1924 - val_loss: 2.0293 - val_accuracy: 0.2148\n","Epoch 6/50\n","32/32 [==============================] - 112s 3s/step - loss: 1.8593 - accuracy: 0.2715 - val_loss: 1.8374 - val_accuracy: 0.2773\n","Epoch 7/50\n","32/32 [==============================] - 116s 3s/step - loss: 1.8131 - accuracy: 0.3096 - val_loss: 1.6057 - val_accuracy: 0.4531\n","Epoch 8/50\n","32/32 [==============================] - 114s 3s/step - loss: 1.6823 - accuracy: 0.3877 - val_loss: 1.5105 - val_accuracy: 0.5156\n","Epoch 9/50\n","32/32 [==============================] - 117s 4s/step - loss: 1.5031 - accuracy: 0.4502 - val_loss: 1.3356 - val_accuracy: 0.5352\n","Epoch 10/50\n","32/32 [==============================] - 115s 3s/step - loss: 1.3468 - accuracy: 0.5244 - val_loss: 1.2195 - val_accuracy: 0.5586\n","Epoch 11/50\n","32/32 [==============================] - 114s 3s/step - loss: 1.2170 - accuracy: 0.5664 - val_loss: 1.0636 - val_accuracy: 0.6367\n","Epoch 12/50\n","32/32 [==============================] - 117s 3s/step - loss: 1.0683 - accuracy: 0.6240 - val_loss: 1.1863 - val_accuracy: 0.5391\n","Epoch 13/50\n","32/32 [==============================] - 113s 3s/step - loss: 0.9989 - accuracy: 0.6396 - val_loss: 1.1969 - val_accuracy: 0.5859\n","Epoch 14/50\n","32/32 [==============================] - 111s 3s/step - loss: 0.9151 - accuracy: 0.6719 - val_loss: 1.1033 - val_accuracy: 0.5820\n","Epoch 15/50\n","32/32 [==============================] - 108s 3s/step - loss: 0.8320 - accuracy: 0.7178 - val_loss: 1.0849 - val_accuracy: 0.6094\n","Epoch 16/50\n","32/32 [==============================] - 109s 3s/step - loss: 0.6705 - accuracy: 0.7871 - val_loss: 0.9633 - val_accuracy: 0.6523\n","Epoch 17/50\n","32/32 [==============================] - 109s 3s/step - loss: 0.6135 - accuracy: 0.7803 - val_loss: 1.0520 - val_accuracy: 0.5977\n","Epoch 18/50\n","32/32 [==============================] - 113s 3s/step - loss: 0.5651 - accuracy: 0.8057 - val_loss: 1.1127 - val_accuracy: 0.6016\n","Epoch 19/50\n","32/32 [==============================] - 111s 3s/step - loss: 0.5634 - accuracy: 0.8086 - val_loss: 1.0843 - val_accuracy: 0.6641\n","Epoch 20/50\n","32/32 [==============================] - 110s 3s/step - loss: 0.4102 - accuracy: 0.8799 - val_loss: 1.0554 - val_accuracy: 0.6680\n","Epoch 21/50\n","32/32 [==============================] - 110s 3s/step - loss: 0.3649 - accuracy: 0.8936 - val_loss: 0.9808 - val_accuracy: 0.6523\n"]}]},{"cell_type":"code","source":["loss, accuracy = model2.evaluate(test_dataset)\n","print(f\"손실: {loss}\")\n","print(f\"정확도: {accuracy}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"pp6m4EQ9uJ19","executionInfo":{"status":"ok","timestamp":1716371641088,"user_tz":-540,"elapsed":10468,"user":{"displayName":"A A","userId":"01071460355606733188"}},"outputId":"5367d264-744b-4d97-9c08-8e37ab446e25"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["10/10 [==============================] - 10s 925ms/step - loss: 1.0068 - accuracy: 0.6938\n","손실: 1.0067603588104248\n","정확도: 0.6937500238418579\n"]}]},{"cell_type":"code","source":["import matplotlib.pyplot as plt\n","\n","# 학습 결과(history)로부터 정확도(accuracy)와 검증 정확도(validation accuracy)를 가져옴\n","train_accuracy = history.history['accuracy']\n","val_accuracy = history.history['val_accuracy']\n","\n","# 에포크 수 생성\n","epochs = range(1, len(train_accuracy) + 1)\n","\n","# 정확도 시각화\n","plt.figure(figsize=(10, 6))\n","plt.plot(epochs, train_accuracy, 'b', label='Training accuracy')\n","plt.plot(epochs, val_accuracy, 'r', label='Validation accuracy')\n","plt.title('Training and Validation Accuracy')\n","plt.xlabel('Epochs')\n","plt.ylabel('Accuracy')\n","plt.legend()\n","plt.grid(True)\n","plt.show()\n"],"metadata":{"id":"lga-p3LMwm-o"},"execution_count":null,"outputs":[]}]}